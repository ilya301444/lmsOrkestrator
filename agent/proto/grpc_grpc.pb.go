// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.0
// source: agent/proto/grpc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessegeClient is the client API for Messege service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessegeClient interface {
	TaskAgent(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*Zero, error)
	HertBit(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*Zero, error)
	TaskToAgent(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Zero, error)
	UpdateTimeLimit(ctx context.Context, in *TimeLimit, opts ...grpc.CallOption) (*Zero, error)
	AnswerTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Zero, error)
}

type messegeClient struct {
	cc grpc.ClientConnInterface
}

func NewMessegeClient(cc grpc.ClientConnInterface) MessegeClient {
	return &messegeClient{cc}
}

func (c *messegeClient) TaskAgent(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*Zero, error) {
	out := new(Zero)
	err := c.cc.Invoke(ctx, "/srvproto.Messege/TaskAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messegeClient) HertBit(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*Zero, error) {
	out := new(Zero)
	err := c.cc.Invoke(ctx, "/srvproto.Messege/HertBit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messegeClient) TaskToAgent(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Zero, error) {
	out := new(Zero)
	err := c.cc.Invoke(ctx, "/srvproto.Messege/TaskToAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messegeClient) UpdateTimeLimit(ctx context.Context, in *TimeLimit, opts ...grpc.CallOption) (*Zero, error) {
	out := new(Zero)
	err := c.cc.Invoke(ctx, "/srvproto.Messege/UpdateTimeLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messegeClient) AnswerTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Zero, error) {
	out := new(Zero)
	err := c.cc.Invoke(ctx, "/srvproto.Messege/AnswerTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessegeServer is the server API for Messege service.
// All implementations must embed UnimplementedMessegeServer
// for forward compatibility
type MessegeServer interface {
	TaskAgent(context.Context, *Agent) (*Zero, error)
	HertBit(context.Context, *Agent) (*Zero, error)
	TaskToAgent(context.Context, *Task) (*Zero, error)
	UpdateTimeLimit(context.Context, *TimeLimit) (*Zero, error)
	AnswerTask(context.Context, *Task) (*Zero, error)
	mustEmbedUnimplementedMessegeServer()
}

// UnimplementedMessegeServer must be embedded to have forward compatible implementations.
type UnimplementedMessegeServer struct {
}

func (UnimplementedMessegeServer) TaskAgent(context.Context, *Agent) (*Zero, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskAgent not implemented")
}
func (UnimplementedMessegeServer) HertBit(context.Context, *Agent) (*Zero, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HertBit not implemented")
}
func (UnimplementedMessegeServer) TaskToAgent(context.Context, *Task) (*Zero, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskToAgent not implemented")
}
func (UnimplementedMessegeServer) UpdateTimeLimit(context.Context, *TimeLimit) (*Zero, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTimeLimit not implemented")
}
func (UnimplementedMessegeServer) AnswerTask(context.Context, *Task) (*Zero, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerTask not implemented")
}
func (UnimplementedMessegeServer) mustEmbedUnimplementedMessegeServer() {}

// UnsafeMessegeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessegeServer will
// result in compilation errors.
type UnsafeMessegeServer interface {
	mustEmbedUnimplementedMessegeServer()
}

func RegisterMessegeServer(s grpc.ServiceRegistrar, srv MessegeServer) {
	s.RegisterService(&Messege_ServiceDesc, srv)
}

func _Messege_TaskAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessegeServer).TaskAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srvproto.Messege/TaskAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessegeServer).TaskAgent(ctx, req.(*Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messege_HertBit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessegeServer).HertBit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srvproto.Messege/HertBit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessegeServer).HertBit(ctx, req.(*Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messege_TaskToAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessegeServer).TaskToAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srvproto.Messege/TaskToAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessegeServer).TaskToAgent(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messege_UpdateTimeLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessegeServer).UpdateTimeLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srvproto.Messege/UpdateTimeLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessegeServer).UpdateTimeLimit(ctx, req.(*TimeLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messege_AnswerTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessegeServer).AnswerTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srvproto.Messege/AnswerTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessegeServer).AnswerTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

// Messege_ServiceDesc is the grpc.ServiceDesc for Messege service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Messege_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "srvproto.Messege",
	HandlerType: (*MessegeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TaskAgent",
			Handler:    _Messege_TaskAgent_Handler,
		},
		{
			MethodName: "HertBit",
			Handler:    _Messege_HertBit_Handler,
		},
		{
			MethodName: "TaskToAgent",
			Handler:    _Messege_TaskToAgent_Handler,
		},
		{
			MethodName: "UpdateTimeLimit",
			Handler:    _Messege_UpdateTimeLimit_Handler,
		},
		{
			MethodName: "AnswerTask",
			Handler:    _Messege_AnswerTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent/proto/grpc.proto",
}
